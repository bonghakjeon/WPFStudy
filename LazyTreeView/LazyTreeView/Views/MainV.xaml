<Window x:Class="LazyTreeView.Views.MainV"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:LazyTreeView.ViewModels"
        xmlns:models="clr-namespace:LazyTreeView.Models"
        xmlns:local="clr-namespace:LazyTreeView.Views"
        mc:Ignorable="d"
        x:Name="root"
        d:DataContext="{d:DesignInstance Type={x:Type vm:MainVM}}"
        Title="MainV" Height="450" Width="800">

    <!-- TODO : C# WPF 팁 - Xaml 안에서 ViewModel속성을 자동완성 되도록 만들기(d:DataContext="{d:DesignInstance Type=vm:MainVM}") (2023.07.17 jbh) -->
    <!-- 유튜브 참고 URL - https://youtu.be/A8t5ktSAgdA -->

    <!--TODO : LazyTreeView 구현 (2023.07.17 jbh)
               유튜브 참고 URL
               WPF TreeView - LazyTreeNode(지연로드 트리뷰) 만들기 - 1
               참고 URL - https://youtu.be/8mCzmlGRU4Y
               
               WPF TreeView - LazyTreeNode(지연로드 트리뷰) 만들기 - 2(완)
               참고 URL - https://youtu.be/IId6XmwlqlQ-->
    
    <Grid>
        <!-- ItemsSource에 바인딩 된 PathNodes는 LazyTreeNode의 Collection이 될 바인딩 객체이다. -->
        <TreeView ItemsSource="{Binding PathNodes}">
            <TreeView.Resources>
                <!-- LazyTreeNode의 Collection인 PathNodes에 속하는 아이템 TreeViewItem -->
                <Style TargetType="{x:Type TreeViewItem}">
                    <!-- 아이템 TreeViewItem에는 LazyTreeNode.cs의 IsExpanded 속성을 바인딩 처리 -->
                    <!-- <TreeView> 영역의 아이템(<Style TargetType="{x:Type TreeViewItem}">) 영역에서
                         IsExpanded 속성((예)Property="IsExpanded")에 LazyTreeNode.cs -> 속성(프로퍼티) IsExpanded 를 바인딩 처리.(Mode는 양방향으로 처리)
                         (<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>) -->
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                </Style>
            </TreeView.Resources>
            
            <!-- TreeView에 계층 추가 -->
            <TreeView.ItemTemplate>
                <!-- DataType(models:LazyTreeNode) 지정 및 ItemsSource에 Children 바인딩 -->
                <!-- TreeView에 추가될 하위 노드로는 DataType은 "models:LazyTreeNode" ItemsSource로는 Children Collection 이다. -->
                <HierarchicalDataTemplate DataType="{x:Type models:LazyTreeNode}" ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal">
                        <!-- 드라이브, 디렉토리, 파일 비트맵 이미지 추가 (Opened, Closed) -->
                        <Image x:Name="treeImage" Width="24" Height="24" Source="{Binding ClosedImage}"/>

                        <!-- TreeView에 추가될 하위 노드 디자인 수정 -->
                        <!-- <TextBlock>영역의 Text 속성에 Children Collection 안에 존재하는 LazyTreeNode 클래스 타입에 포함된 속성(프로퍼티) Text로 바인딩 처리 -->
                        <TextBlock Text="{Binding Text}" FontSize="20"/>
                    </StackPanel>

                    <!-- Trigger 영역 -->
                        <!-- 더미노드가 펼쳐졌을 경우 실행되는 Trigger -->
                    <HierarchicalDataTemplate.Triggers>
                        <!-- 더미노드가 펼쳐졌을 경우 프로퍼티 IsExpanded의 값(Value)이 True를 의미-->
                        <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                            <!-- 더미노드가 펼쳐졌을 경우 x:Name="treeImage"인 <Image> 영역의 Source 프로퍼티가 바인딩하는 객체(Value)가 OpenedImage로 변경 -->
                            <Setter TargetName="treeImage"
                                        Property="Source"
                                        Value="{Binding OpenedImage}"/>
                        </DataTrigger>
                    </HierarchicalDataTemplate.Triggers>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>
