<Window x:Class="LazyTreeView.Views.MainV"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:LazyTreeView.ViewModels"
        xmlns:models="clr-namespace:LazyTreeView.Models"
        xmlns:local="clr-namespace:LazyTreeView.Views"
        mc:Ignorable="d"
        x:Name="root"
        d:DataContext="{d:DesignInstance Type={x:Type vm:MainVM}}"
        Title="MainV" Height="450" Width="800">

    <!-- TODO : C# WPF 팁 - Xaml 안에서 ViewModel속성을 자동완성 되도록 만들기(d:DataContext="{d:DesignInstance Type=vm:MainVM}") (2023.07.17 jbh) -->
    <!-- 유튜브 참고 URL - https://youtu.be/A8t5ktSAgdA -->

    <!--TODO : LazyTreeView 구현 (2023.07.17 jbh)
               유튜브 참고 URL
               WPF TreeView - LazyTreeNode(지연로드 트리뷰) 만들기 - 1
               참고 URL - https://youtu.be/8mCzmlGRU4Y
               
               WPF TreeView - LazyTreeNode(지연로드 트리뷰) 만들기 - 2(완)
               참고 URL - https://youtu.be/IId6XmwlqlQ-->

    <Grid>
        <!-- TODO : 화면 내 그리드 3분할 할 수 있도록 <GridSplitter> 사용해서 구현 (2023.07.13 jbh) -->
        <!-- 참고 URL - https://icodebroker.tistory.com/8114 -->
        <!-- 화면 영역 -->
        <Grid Margin="10">
            <Grid.ColumnDefinitions>
                <!-- TODO : <ColumnDefinition>영역에서 Width 가중치 (1 대 2 비율) 구현 (2023.07.14 jbh) -->
                <!-- 참고 URL - https://benstagram.tistory.com/33 -->
                <ColumnDefinition Width="*"    />
                <!-- Width 가중치 1 -->
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="2*"   />
                <!-- Width 가중치 2 -->
            </Grid.ColumnDefinitions>

            <!-- Border 속성 "BorderBrush", "BorderThickness" 사용법 
             참고 URL - https://talkingaboutme.tistory.com/entry/WP7-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88-border-%EC%86%8D%EC%84%B1 -->
            <!-- 화면 좌측 TreeView 영역 -->
            <!-- 참고 URL - http://inasie.tistory.com/19 -->
            <!-- 참고 2 URL - https://insurang.tistory.com/383 -->
            <Border Grid.Row="0" Grid.Column="0" BorderBrush="Blue" BorderThickness="10">
                <!-- TODO : TreeView 테스트 코드 추후 삭제 예정 (2023.07.14 jbh) -->
                <!-- TODO : TreeView DataType, ItemsSource 관련 클래스 Folder 구현 (2023.07.14 jbh)
                        참고 URL - https://icodebroker.tistory.com/entry/CWPF-TreeViewItem-%ED%81%B4%EB%9E%98%EC%8A%A4-ItemsSource-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%ED%8A%B8%EB%A6%AC-%EB%B7%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0#google_vignette-->
                <!--<TreeView Name="folderTreeView">
                    <TreeViewItem Header="폴더"
                              ItemsSource="{Binding Source={StaticResource ObjectDataProviderKey}, Path=SubFolderCollection}" />
                </TreeView>-->
                <!-- ItemsSource에 바인딩 된 PathNodes는 LazyTreeNode의 Collection이 될 바인딩 객체이다. -->
                <TreeView ItemsSource="{Binding PathNodes}" Name="folderTreeView">
                    <TreeView.Resources>
                        <!--LazyTreeNode의 Collection인 PathNodes에 속하는 아이템 TreeViewItem-->
                        <Style TargetType="{x:Type TreeViewItem}">
                            <!--아이템 TreeViewItem에는 LazyTreeNode.cs의 IsExpanded 속성을 바인딩 처리 
                     <TreeView> 영역의 아이템(<Style TargetType="{x:Type TreeViewItem}">) 영역에서
                         IsExpanded 속성((예)Property="IsExpanded")에 LazyTreeNode.cs -> 속성(프로퍼티) IsExpanded 를 바인딩 처리.(Mode는 양방향으로 처리)
                         (<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>)-->
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                        </Style>
                    </TreeView.Resources>

                    <!--TreeView에 계층 추가-->
                    <TreeView.ItemTemplate>
                        <!--DataType(models:LazyTreeNode) 지정 및 ItemsSource에 Children 바인딩 
                 TreeView에 추가될 하위 노드로는 DataType은 "models:LazyTreeNode" ItemsSource로는 Children Collection 이다.-->
                        <HierarchicalDataTemplate DataType="{x:Type models:LazyTreeNode}" ItemsSource="{Binding Children}">
                            <StackPanel Orientation="Horizontal">
                                <!--드라이브, 디렉토리, 파일 비트맵 이미지 추가 (Opened, Closed)-->
                                <Image x:Name="treeImage" Width="24" Height="24" Source="{Binding ClosedImage}"/>

                                <!--TreeView에 추가될 하위 노드 디자인 수정-->
                                <!--<TextBlock>영역의 Text 속성에 Children Collection 안에 존재하는 LazyTreeNode 클래스 타입에 포함된 속성(프로퍼티) FileName로 바인딩 처리-->
                                <TextBlock Text="{Binding FileName}" FontSize="20"/>
                            </StackPanel>

                            <!--Trigger 영역-->
                            <!--더미노드가 펼쳐졌을 경우 실행되는 Trigger-->
                            <HierarchicalDataTemplate.Triggers>
                                <!--더미노드가 펼쳐졌을 경우 프로퍼티 IsExpanded의 값(Value)이 True를 의미-->
                                <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                                    <!--더미노드가 펼쳐졌을 경우 x:Name="treeImage"인 <Image> 영역의 Source 프로퍼티가 바인딩하는 객체(Value)가 OpenedImage로 변경-->
                                    <Setter TargetName="treeImage"
                                        Property="Source"
                                        Value="{Binding OpenedImage}"/>
                                </DataTrigger>
                            </HierarchicalDataTemplate.Triggers>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>
            </Border>

            <!-- <GridSplitter> 사용해서 그리드 세로 분할 -->
            <GridSplitter Grid.Row="0" Grid.Column="1"
            HorizontalAlignment="Center"
            VerticalAlignment="Stretch"
            Width="10"
            ShowsPreview="True" />

            <Grid Grid.Row="0" Grid.Column="2">
                <Grid.RowDefinitions>
                    <!-- TODO : <RowDefinition>영역에서 Height 가중치 (1.5 대 1 비율) 구현 (2023.07.14 jbh) -->
                    <!-- 참고 URL - https://benstagram.tistory.com/33 -->
                    <RowDefinition Height="1.5*" />
                    <!-- Height 가중치 1.5 -->
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*"    />
                    <!-- Height 가중치 1   -->
                </Grid.RowDefinitions>

                <!-- 화면 우측 상단 GridView 영역 -->
                <Border Grid.Row="0" Grid.Column="0" BorderBrush="Red" BorderThickness="10">
                    <!-- GridView 영역 -->
                    <!-- TODO: GridView 영역 구현시 <Grid> 또는 <DataGrid> 둘 중에 하나로 구현하기 (2023.07.13 jbh) -->
                    <!-- TODO: 아래 <DataGrid> 영역 테스트 코드 추후 삭제 예정 (2023.07.14 jbh) -->
                    <!--<DataGrid ItemsSource="{Binding ElementName=folderTreeView, Path=SelectedItem.SubFolderCollection, Mode=OneWay}"/>-->
                    <DataGrid ItemsSource="{Binding SubFolderCollection}">
                    </DataGrid>
                </Border>

                <!-- <GridSplitter> 사용해서 그리드 가로 분할 -->
                <GridSplitter Grid.Row="1" Grid.Column="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                Height="10"
                ShowsPreview="True" />

                <!-- 화면 우측 하단 ListView 영역 -->
                <Border Grid.Row="2" Grid.Column="0" BorderBrush="Green" BorderThickness="10">
                    <!-- ListView 영역 -->
                    <!-- TODO: 아래 <ListView> 영역 테스트 코드 추후 삭제 예정 (2023.07.14 jbh) -->
                    <!-- <ListView ItemsSource="{Binding ElementName=folderTreeView, Path=SelectedItem.FileInfoCollection, Mode=OneWay}"/> -->
                    <!--<DataGrid ItemsSource="{Binding ElementName=folderTreeView, Path=SelectedItem.FileInfoCollection, Mode=OneWay}"/>-->
                    <DataGrid ItemsSource="{Binding FileInfoCollection}"/>
                </Border>
            </Grid>
        </Grid>
    </Grid>
</Window>
